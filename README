################################################
# CHEMICAL SYSTEM 2 KINETIC EQUATIONs
# 			 Author: luca.mella@studio.unibo.it
################################################

To run each tool in pipeline for generating solvable ODE system from HLCeL

Simple script for automate translation from High Level Chemical Language to ODEs System
Usage: ./translate.sh <HLCeL-source-file> <output-file> (matlab|scipy) (g|c)
Where:
	"mablab" and "scipy" are the selectable target language
	"-g" means ENABLE GRAPHIC OUTPUT
	"-c" means ENABLE CSV OUTPUT (supported only with scipy at the moment)
NOTE: parameters are mandatory!


Othrerwise here there are all information needed for using these two tools..

# -----------------------------------------------
# chem2kinetic.py - CRSL to Solvable ODE System
# -----------------------------------------------

SYNOPSIS
	
	Translate Chemical Equation  to the corresponding Reaction Rate Equations set. 
	Basically translate a Domain Specific Language (DSL) to a script 
	that solves the system of ODEs composed of chemical system's
	kinetic equations.
	
	Credits:
	This software is a refactoring and an extension of Kinpy 
		site = http://code.google.com/p/kinpy/
		author = akshaysrinivasan@gmail.com
		license = GPLv2
	
DESCRIPTION
	
	Chemnical Reaction Specification Language EBNF:
	
	chem ::= chemeq [inits] [interval] .
	chemeq ::= "eq" eq chemeqrest .
	chemeqrest ::= [] | "eq" eq chemeqrest.
	eq ::= reagents rate products "." .
	reagents ::= molecule reagentsrest .
	reagentsrest ::= [] | "+" molecule reagentsrest.
	products ::= molecule productsrest .
	productsrest ::= [] | "+" molecule productsrest.
	rate ::= "--" number "-->" | "-->".
	molecule ::= number "*" literal | literal.
	interval ::= "intrerval" number "-->" number ":" number "."
	inits ::= "initval" literal "=" number "." inits | [] .
	
EXAMPLES
	
	Help:
		-h, --help		show this help message and exit
		-l --language		Generator to use for code generation (at the moment "matlab" or "scipy")
		-i INPUT FILE, --infile=INPUT FILE
							Input File (DEFAULT: stdin,, "-" for stdin)
		-o OUTPUT FILE, --outfile=OUTPUT FILE
							Input File (DEFAULT: stdout, "-" for stdoud)
		-v, --verbose		Verbose output
		-c, --csv			Csv output enabled
		-g, --graphics		Graphics output enabled
	
	Eg.
		python chem2kinetic.py -l scipy -i inputscript.k -o outputscript.py -g
	Then run:
		python outputscript.py
	For solving Rate Equation system

EXIT STATUS

	Exit=-2	when cant load a valid code generator
	Exit=-1	when errors detected during translation
	Exit=0	if all ok

AUTHOR

	luca.mella@studio.unibo.it

LICENSE

	Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)

VERSION

	0.2

# -----------------------------------------------
# hlchem2chemeq.sh - HLCeL to CRSL
# -----------------------------------------------

SYNOPSIS
	
	Translate High Level Chemical Equation to corresponding Chemical Reaction. 
	High level chEm Language supports molecule parametrization that could be
	usefull to emulate spatial nodes through differents molecule types.
	Chemical Reaction language can be processed further by 'chem2kinetic' for
	obtaining a numerically solvable system of rate equation which is an 
	approximation of the chemical system.
	
	The main introduced by this High Level chemical equation is the automation
	of the generation of the chemical equations.
	Roughtly speaking, if we want to model a spatial chemical system with more nodes 
	and we'd like to model also molecules migration, we probably need to model
	nodes neighborhood throug an elevate number of \"point2point\" equation.
	
	High Level Chemical Equation Language supports equation specification such as:
		
		eq X(i) + MOL -- 2 --> X(j) . where i in 1..5 j in 1..5 with i!=j
		eq --> 2*Y(i,j) . where i in 1..3 j in 4..6 
		...
	
DESCRIPTION
	
	High Level Chemnical Reaction Specification Language EBNF:
	
		chemeq ::= [] | eq  chemeq .
		eq ::= 'eq' reagents rate products '.'  conditions .
		conditions ::= [] | ranges constraints .
		ranges ::= [] | 'where' [lit(X)] 'in' range ranges.
		rangesrest ::= [] |  [lit(X)] 'in' range rangesrest.
		range ::=  [num(N)] '.' '.' [num(NN)] .
		constraints ::= [] | 'with' constraint constraints .
		constraint ::= [lit(X)]  constraintrest .
		constraintrest ::= ( '!=' |'==' ) value.
		value ::= [lit(X)] | [num(Y)] | range | <math-expression> .
		reagents ::= [] | molecule reagentsrest .
		reagentsrest ::= [] | '+' molecule reagentsrest .
		products ::= reagents.
		rate ::= '-->' | '--' [num(N)] '-->'.
		molecule ::= mol | number '*' mol.
		mol ::= [cap(M)] molrest .
		molrest::= [] | '(' indexes ')' .
		indexes ::= [lit(X)] indexesrest .
		indexesrest ::= [] | ',' [lit(X)] indexesrest.
	
	Correctness:
		- Each molecule in Reagents must have a unique name. The same is valid for Products
 		- For each (unique) index specified into molecules MUST be specified a range.
		- Ranges specification of unused indexes are ILLEGAL
		- Constraints expressions cannot contain the index used in the left part of the expresstion 
		  in the right part. (We do not solve equations at the moment)
		- Illegal constraints are i=i (useless) and i!=i (make no sense)

EXAMPLES
	
	echo \"eq X(i) --> X(j). where i in 1..4 j in 1..4 with i!=j\" | $0 
		eq 1*X_1 --1--> 1*X_2 .
		eq 1*X_1 --1--> 1*X_3 .
		eq 1*X_1 --1--> 1*X_4 .
		eq 1*X_2 --1--> 1*X_1 .
		eq 1*X_2 --1--> 1*X_3 .
		eq 1*X_2 --1--> 1*X_4 .
		eq 1*X_3 --1--> 1*X_1 .
		eq 1*X_3 --1--> 1*X_2 .
		eq 1*X_3 --1--> 1*X_4 .
		eq 1*X_4 --1--> 1*X_1 .
		eq 1*X_4 --1--> 1*X_2 .
		eq 1*X_4 --1--> 1*X_3 .
	echo \"eq X(i) --> X(j) .  where i in 5..1 j in 1..5 with i == j-1\" |$0
		eq 1*X_4 --1--> 1*X_5 .
		eq 1*X_3 --1--> 1*X_4 .
		eq 1*X_2 --1--> 1*X_3 .
		eq 1*X_1 --1--> 1*X_2 .

		
EXIT STATUS

	Exit=0

AUTHOR

	luca.mella@studio.unibo.it

LICENSE

	Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)

VERSION

	0.1
